# Reorders the pages of a pdf file and makes a 1 x 2 pdf in booklet format. The pages are arranged in sets 32 pages (8 sheets of paper).

# Permutation of the pages of a set of 32 pages, divided among 8 sheets of paper. This could also be done with the seq4KGen function by setting k = 8, but the permutation is shown here to demonstrate how the pages are being reordered.
seq32 = [32, 1, 2, 31, 30, 3, 4, 29, 28, 5, 6, 27, 26, 7, 8, 25, 24, 9, 10, 23, 22, 11, 12, 21, 20, 13, 14, 19, 18, 15, 16, 17]

#Required Python libraries. PyPDF2 actually handles the pdf format.
from PyPDF2 import PdfFileReader, PdfFileWriter
import math, copy

# The blank_a4.pdf is a one-page pdf with no content. If the number of pages in the input pdf is not a multiple of 4, copis of this blank sheet is appended to the file to be processed.
blank_path = 'blank_a4.pdf'
# Path is the address of the file to be processed. Use your own path, or keep the pdf file in the same folder and rename it to "input.pdf"
path = 'input.pdf'

n, n1 = PdfFileReader(path).getNumPages(), PdfFileReader(path).getNumPages()
pdf_reader = PdfFileReader(path)
blank_pdf_reader = PdfFileReader(blank_path)

#generate the booklet style permutation of 4k pages
def seq4KGen(k):
    seq = []
    for i in range(k):
        seq.append(4*k-2*i)
        seq.append(2*i+1)
        seq.append(2*i+2)
        seq.append(4*k-2*i-1)
        i += 1
    return seq

# Calculating the number of empty pages to be inserted
def normalize_n():
    global n
    n = n + (4 - (n % 4))

# Generating the permutation of all the pages in the file
def seqGen():
    seq = []
    m, p = n//32, (n % 32)//4
    for k in range(m):
        for num in seq32:
            seq.append(32*k+num-1)
    if p > 0:
        seq4K = seq4KGen(p)
        for num in seq4K:
            seq.append(num-1+32*m)
    return seq

# Normalized is the pdf generated by adding the required number of copies of the white page.
def Normalize(output='normalized.pdf'):
    pdf_writer = PdfFileWriter()
    for page in range(n):
        if page <= n1-1:
            pdf_writer.addPage(pdf_reader.getPage(page))
        else:
            pdf_writer.addPage(blank_pdf_reader.getPage(0))
    with open(output, 'wb') as out:
        pdf_writer.write(out)

# Makes new pdf with pages rearranged
def Rearrange(path='normalized.pdf'):
    pdf = PdfFileWriter()
    normalized_pdf = PdfFileReader(path)
    seq = seqGen()
    for i in seq:
        pdf.addPage(normalized_pdf.getPage(i))
    output = 'rearranged.pdf'
    with open(output, 'wb') as output_pdf:
        pdf.write(output_pdf)


# Arrages the pages in 1 x 2 format (2 sheets per page in portrait mode), and saves the result in 'output.pdf'
def Bookletify(path='rearranged.pdf'):
    input = PdfFileReader(path)
    output = PdfFileWriter()
    for i in range(0,n,2):
        left_page, right_page = input.getPage(i), input.getPage(i+1)
        offset_x, offset_y = left_page.mediaBox[2], 0
        left_page.mergeTranslatedPage(right_page, offset_x, offset_y, expand=True)
        output.addPage(left_page)
    outputpdf = 'output.pdf'
    with open(outputpdf, 'wb') as duplexed_pdf:
        output.write(duplexed_pdf)

normalize_n()
Normalize()
Rearrange()
Bookletify()
